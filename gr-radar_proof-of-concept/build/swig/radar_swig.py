# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radar_swig', [dirname(__file__)])
        except ImportError:
            import _radar_swig
            return _radar_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_radar_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _radar_swig = swig_import_helper()
    del swig_import_helper
else:
    import _radar_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_epoch()
class signal_generator_cw_c(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int packet_len, int samp_rate, float freq, float ampl) -> signal_generator_cw_c_sptr

        Return a shared_ptr to a new instance of radar::signal_generator_cw_c.

        To avoid accidental use of raw pointers, radar::signal_generator_cw_c's constructor is in a private implementation class. radar::signal_generator_cw_c::make is the public interface for creating new instances.

        Params: (packet_len, samp_rate, freq, ampl)
        """
        return _radar_swig.signal_generator_cw_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_signal_generator_cw_c
    __del__ = lambda self : None;
signal_generator_cw_c_swigregister = _radar_swig.signal_generator_cw_c_swigregister
signal_generator_cw_c_swigregister(signal_generator_cw_c)

def signal_generator_cw_c_make(*args, **kwargs):
  """
    signal_generator_cw_c_make(int packet_len, int samp_rate, float freq, float ampl) -> signal_generator_cw_c_sptr

    Return a shared_ptr to a new instance of radar::signal_generator_cw_c.

    To avoid accidental use of raw pointers, radar::signal_generator_cw_c's constructor is in a private implementation class. radar::signal_generator_cw_c::make is the public interface for creating new instances.

    Params: (packet_len, samp_rate, freq, ampl)
    """
  return _radar_swig.signal_generator_cw_c_make(*args, **kwargs)

class signal_generator_cw_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::signal_generator_cw_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::signal_generator_cw_c)> self) -> signal_generator_cw_c_sptr
        __init__(boost::shared_ptr<(gr::radar::signal_generator_cw_c)> self, signal_generator_cw_c p) -> signal_generator_cw_c_sptr
        """
        this = _radar_swig.new_signal_generator_cw_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(signal_generator_cw_c_sptr self) -> signal_generator_cw_c"""
        return _radar_swig.signal_generator_cw_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_signal_generator_cw_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(signal_generator_cw_c_sptr self, int packet_len, int samp_rate, float freq, float ampl) -> signal_generator_cw_c_sptr

        Return a shared_ptr to a new instance of radar::signal_generator_cw_c.

        To avoid accidental use of raw pointers, radar::signal_generator_cw_c's constructor is in a private implementation class. radar::signal_generator_cw_c::make is the public interface for creating new instances.

        Params: (packet_len, samp_rate, freq, ampl)
        """
        return _radar_swig.signal_generator_cw_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(signal_generator_cw_c_sptr self) -> unsigned int"""
        return _radar_swig.signal_generator_cw_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(signal_generator_cw_c_sptr self, int which, int delay)
        declare_sample_delay(signal_generator_cw_c_sptr self, unsigned int delay)
        """
        return _radar_swig.signal_generator_cw_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(signal_generator_cw_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.signal_generator_cw_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(signal_generator_cw_c_sptr self) -> double"""
        return _radar_swig.signal_generator_cw_c_sptr_relative_rate(self)

    def start(self):
        """start(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_start(self)

    def stop(self):
        """stop(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(signal_generator_cw_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.signal_generator_cw_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(signal_generator_cw_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.signal_generator_cw_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(signal_generator_cw_c_sptr self, int m)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(signal_generator_cw_c_sptr self)"""
        return _radar_swig.signal_generator_cw_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(signal_generator_cw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(signal_generator_cw_c_sptr self, long max_output_buffer)
        set_max_output_buffer(signal_generator_cw_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.signal_generator_cw_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(signal_generator_cw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(signal_generator_cw_c_sptr self, long min_output_buffer)
        set_min_output_buffer(signal_generator_cw_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.signal_generator_cw_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full_var(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full_var(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(signal_generator_cw_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(signal_generator_cw_c_sptr self)"""
        return _radar_swig.signal_generator_cw_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(signal_generator_cw_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.signal_generator_cw_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(signal_generator_cw_c_sptr self, int priority) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(signal_generator_cw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(signal_generator_cw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(signal_generator_cw_c_sptr self) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(signal_generator_cw_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(signal_generator_cw_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(signal_generator_cw_c_sptr self, std::string name)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(signal_generator_cw_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.signal_generator_cw_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(signal_generator_cw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(signal_generator_cw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(signal_generator_cw_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_subscribers(self, *args, **kwargs)

signal_generator_cw_c_sptr_swigregister = _radar_swig.signal_generator_cw_c_sptr_swigregister
signal_generator_cw_c_sptr_swigregister(signal_generator_cw_c_sptr)

signal_generator_cw_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
signal_generator_cw_c = signal_generator_cw_c.make;

class simulator_cc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float rng, pmt_vector_float vlc, pmt_vector_float rcs, int samp_rate, 
            float center_freq) -> simulator_cc_sptr

        Return a shared_ptr to a new instance of radar::simulator_cc.

        To avoid accidental use of raw pointers, radar::simulator_cc's constructor is in a private implementation class. radar::simulator_cc::make is the public interface for creating new instances.

        Params: (rng, vlc, rcs, samp_rate, center_freq)
        """
        return _radar_swig.simulator_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_simulator_cc
    __del__ = lambda self : None;
simulator_cc_swigregister = _radar_swig.simulator_cc_swigregister
simulator_cc_swigregister(simulator_cc)

def simulator_cc_make(*args, **kwargs):
  """
    simulator_cc_make(pmt_vector_float rng, pmt_vector_float vlc, pmt_vector_float rcs, int samp_rate, 
        float center_freq) -> simulator_cc_sptr

    Return a shared_ptr to a new instance of radar::simulator_cc.

    To avoid accidental use of raw pointers, radar::simulator_cc's constructor is in a private implementation class. radar::simulator_cc::make is the public interface for creating new instances.

    Params: (rng, vlc, rcs, samp_rate, center_freq)
    """
  return _radar_swig.simulator_cc_make(*args, **kwargs)

class simulator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::simulator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::simulator_cc)> self) -> simulator_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::simulator_cc)> self, simulator_cc p) -> simulator_cc_sptr
        """
        this = _radar_swig.new_simulator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(simulator_cc_sptr self) -> simulator_cc"""
        return _radar_swig.simulator_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_simulator_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(simulator_cc_sptr self, pmt_vector_float rng, pmt_vector_float vlc, pmt_vector_float rcs, int samp_rate, 
            float center_freq) -> simulator_cc_sptr

        Return a shared_ptr to a new instance of radar::simulator_cc.

        To avoid accidental use of raw pointers, radar::simulator_cc's constructor is in a private implementation class. radar::simulator_cc::make is the public interface for creating new instances.

        Params: (rng, vlc, rcs, samp_rate, center_freq)
        """
        return _radar_swig.simulator_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(simulator_cc_sptr self) -> unsigned int"""
        return _radar_swig.simulator_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(simulator_cc_sptr self, int which, int delay)
        declare_sample_delay(simulator_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.simulator_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(simulator_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.simulator_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(simulator_cc_sptr self) -> int"""
        return _radar_swig.simulator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(simulator_cc_sptr self) -> double"""
        return _radar_swig.simulator_cc_sptr_relative_rate(self)

    def start(self):
        """start(simulator_cc_sptr self) -> bool"""
        return _radar_swig.simulator_cc_sptr_start(self)

    def stop(self):
        """stop(simulator_cc_sptr self) -> bool"""
        return _radar_swig.simulator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(simulator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.simulator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(simulator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.simulator_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(simulator_cc_sptr self) -> int"""
        return _radar_swig.simulator_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(simulator_cc_sptr self, int m)"""
        return _radar_swig.simulator_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(simulator_cc_sptr self)"""
        return _radar_swig.simulator_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(simulator_cc_sptr self) -> bool"""
        return _radar_swig.simulator_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(simulator_cc_sptr self, int i) -> long"""
        return _radar_swig.simulator_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(simulator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(simulator_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.simulator_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(simulator_cc_sptr self, int i) -> long"""
        return _radar_swig.simulator_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(simulator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(simulator_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.simulator_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.simulator_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(simulator_cc_sptr self) -> float"""
        return _radar_swig.simulator_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(simulator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.simulator_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(simulator_cc_sptr self)"""
        return _radar_swig.simulator_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(simulator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.simulator_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(simulator_cc_sptr self) -> int"""
        return _radar_swig.simulator_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(simulator_cc_sptr self) -> int"""
        return _radar_swig.simulator_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(simulator_cc_sptr self, int priority) -> int"""
        return _radar_swig.simulator_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(simulator_cc_sptr self) -> std::string"""
        return _radar_swig.simulator_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(simulator_cc_sptr self) -> std::string"""
        return _radar_swig.simulator_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(simulator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.simulator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(simulator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.simulator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(simulator_cc_sptr self) -> long"""
        return _radar_swig.simulator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(simulator_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.simulator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(simulator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.simulator_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(simulator_cc_sptr self) -> std::string"""
        return _radar_swig.simulator_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(simulator_cc_sptr self, std::string name)"""
        return _radar_swig.simulator_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(simulator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.simulator_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(simulator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.simulator_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(simulator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.simulator_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(simulator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.simulator_cc_sptr_message_subscribers(self, *args, **kwargs)

simulator_cc_sptr_swigregister = _radar_swig.simulator_cc_sptr_swigregister
simulator_cc_sptr_swigregister(simulator_cc_sptr)

simulator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
simulator_cc = simulator_cc.make;

class tsfft_cc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> tsfft_cc_sptr

        Return a shared_ptr to a new instance of radar::tsfft_cc.

        To avoid accidental use of raw pointers, radar::tsfft_cc's constructor is in a private implementation class. radar::tsfft_cc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _radar_swig.tsfft_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_tsfft_cc
    __del__ = lambda self : None;
tsfft_cc_swigregister = _radar_swig.tsfft_cc_swigregister
tsfft_cc_swigregister(tsfft_cc)

def tsfft_cc_make():
  """
    tsfft_cc_make() -> tsfft_cc_sptr

    Return a shared_ptr to a new instance of radar::tsfft_cc.

    To avoid accidental use of raw pointers, radar::tsfft_cc's constructor is in a private implementation class. radar::tsfft_cc::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _radar_swig.tsfft_cc_make()

class tsfft_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::tsfft_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::tsfft_cc)> self) -> tsfft_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::tsfft_cc)> self, tsfft_cc p) -> tsfft_cc_sptr
        """
        this = _radar_swig.new_tsfft_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(tsfft_cc_sptr self) -> tsfft_cc"""
        return _radar_swig.tsfft_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_tsfft_cc_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(tsfft_cc_sptr self) -> tsfft_cc_sptr

        Return a shared_ptr to a new instance of radar::tsfft_cc.

        To avoid accidental use of raw pointers, radar::tsfft_cc's constructor is in a private implementation class. radar::tsfft_cc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _radar_swig.tsfft_cc_sptr_make(self)

    def history(self):
        """history(tsfft_cc_sptr self) -> unsigned int"""
        return _radar_swig.tsfft_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tsfft_cc_sptr self, int which, int delay)
        declare_sample_delay(tsfft_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.tsfft_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(tsfft_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.tsfft_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(tsfft_cc_sptr self) -> int"""
        return _radar_swig.tsfft_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(tsfft_cc_sptr self) -> double"""
        return _radar_swig.tsfft_cc_sptr_relative_rate(self)

    def start(self):
        """start(tsfft_cc_sptr self) -> bool"""
        return _radar_swig.tsfft_cc_sptr_start(self)

    def stop(self):
        """stop(tsfft_cc_sptr self) -> bool"""
        return _radar_swig.tsfft_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(tsfft_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.tsfft_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(tsfft_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.tsfft_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(tsfft_cc_sptr self) -> int"""
        return _radar_swig.tsfft_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(tsfft_cc_sptr self, int m)"""
        return _radar_swig.tsfft_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tsfft_cc_sptr self)"""
        return _radar_swig.tsfft_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tsfft_cc_sptr self) -> bool"""
        return _radar_swig.tsfft_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(tsfft_cc_sptr self, int i) -> long"""
        return _radar_swig.tsfft_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tsfft_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(tsfft_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.tsfft_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(tsfft_cc_sptr self, int i) -> long"""
        return _radar_swig.tsfft_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tsfft_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(tsfft_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.tsfft_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tsfft_cc_sptr self, int which) -> float
        pc_input_buffers_full(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tsfft_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tsfft_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tsfft_cc_sptr self, int which) -> float
        pc_output_buffers_full(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tsfft_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tsfft_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(tsfft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.tsfft_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(tsfft_cc_sptr self) -> float"""
        return _radar_swig.tsfft_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(tsfft_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.tsfft_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(tsfft_cc_sptr self)"""
        return _radar_swig.tsfft_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(tsfft_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.tsfft_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(tsfft_cc_sptr self) -> int"""
        return _radar_swig.tsfft_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(tsfft_cc_sptr self) -> int"""
        return _radar_swig.tsfft_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(tsfft_cc_sptr self, int priority) -> int"""
        return _radar_swig.tsfft_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(tsfft_cc_sptr self) -> std::string"""
        return _radar_swig.tsfft_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(tsfft_cc_sptr self) -> std::string"""
        return _radar_swig.tsfft_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(tsfft_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.tsfft_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(tsfft_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.tsfft_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(tsfft_cc_sptr self) -> long"""
        return _radar_swig.tsfft_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(tsfft_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.tsfft_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(tsfft_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.tsfft_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(tsfft_cc_sptr self) -> std::string"""
        return _radar_swig.tsfft_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(tsfft_cc_sptr self, std::string name)"""
        return _radar_swig.tsfft_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(tsfft_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.tsfft_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(tsfft_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.tsfft_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(tsfft_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.tsfft_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(tsfft_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.tsfft_cc_sptr_message_subscribers(self, *args, **kwargs)

tsfft_cc_sptr_swigregister = _radar_swig.tsfft_cc_sptr_swigregister
tsfft_cc_sptr_swigregister(tsfft_cc_sptr)

tsfft_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tsfft_cc = tsfft_cc.make;

class os_cfar_c(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float avg_mult) -> os_cfar_c_sptr

        Return a shared_ptr to a new instance of radar::os_cfar_c.

        To avoid accidental use of raw pointers, radar::os_cfar_c's constructor is in a private implementation class. radar::os_cfar_c::make is the public interface for creating new instances.

        Params: (samp_rate, samp_compare, samp_protect, rel_threshold, avg_mult)
        """
        return _radar_swig.os_cfar_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_os_cfar_c
    __del__ = lambda self : None;
os_cfar_c_swigregister = _radar_swig.os_cfar_c_swigregister
os_cfar_c_swigregister(os_cfar_c)

def os_cfar_c_make(*args, **kwargs):
  """
    os_cfar_c_make(int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float avg_mult) -> os_cfar_c_sptr

    Return a shared_ptr to a new instance of radar::os_cfar_c.

    To avoid accidental use of raw pointers, radar::os_cfar_c's constructor is in a private implementation class. radar::os_cfar_c::make is the public interface for creating new instances.

    Params: (samp_rate, samp_compare, samp_protect, rel_threshold, avg_mult)
    """
  return _radar_swig.os_cfar_c_make(*args, **kwargs)

class os_cfar_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::os_cfar_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::os_cfar_c)> self) -> os_cfar_c_sptr
        __init__(boost::shared_ptr<(gr::radar::os_cfar_c)> self, os_cfar_c p) -> os_cfar_c_sptr
        """
        this = _radar_swig.new_os_cfar_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(os_cfar_c_sptr self) -> os_cfar_c"""
        return _radar_swig.os_cfar_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_os_cfar_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(os_cfar_c_sptr self, int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float avg_mult) -> os_cfar_c_sptr

        Return a shared_ptr to a new instance of radar::os_cfar_c.

        To avoid accidental use of raw pointers, radar::os_cfar_c's constructor is in a private implementation class. radar::os_cfar_c::make is the public interface for creating new instances.

        Params: (samp_rate, samp_compare, samp_protect, rel_threshold, avg_mult)
        """
        return _radar_swig.os_cfar_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(os_cfar_c_sptr self) -> unsigned int"""
        return _radar_swig.os_cfar_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(os_cfar_c_sptr self, int which, int delay)
        declare_sample_delay(os_cfar_c_sptr self, unsigned int delay)
        """
        return _radar_swig.os_cfar_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(os_cfar_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.os_cfar_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(os_cfar_c_sptr self) -> double"""
        return _radar_swig.os_cfar_c_sptr_relative_rate(self)

    def start(self):
        """start(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_start(self)

    def stop(self):
        """stop(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(os_cfar_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.os_cfar_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(os_cfar_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.os_cfar_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(os_cfar_c_sptr self, int m)"""
        return _radar_swig.os_cfar_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(os_cfar_c_sptr self)"""
        return _radar_swig.os_cfar_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(os_cfar_c_sptr self, int i) -> long"""
        return _radar_swig.os_cfar_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(os_cfar_c_sptr self, long max_output_buffer)
        set_max_output_buffer(os_cfar_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.os_cfar_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(os_cfar_c_sptr self, int i) -> long"""
        return _radar_swig.os_cfar_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(os_cfar_c_sptr self, long min_output_buffer)
        set_min_output_buffer(os_cfar_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.os_cfar_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full_var(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full_var(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(os_cfar_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.os_cfar_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(os_cfar_c_sptr self)"""
        return _radar_swig.os_cfar_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(os_cfar_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.os_cfar_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(os_cfar_c_sptr self, int priority) -> int"""
        return _radar_swig.os_cfar_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(os_cfar_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.os_cfar_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(os_cfar_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.os_cfar_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(os_cfar_c_sptr self) -> long"""
        return _radar_swig.os_cfar_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(os_cfar_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.os_cfar_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(os_cfar_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.os_cfar_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(os_cfar_c_sptr self, std::string name)"""
        return _radar_swig.os_cfar_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(os_cfar_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.os_cfar_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(os_cfar_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(os_cfar_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(os_cfar_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_subscribers(self, *args, **kwargs)

os_cfar_c_sptr_swigregister = _radar_swig.os_cfar_c_sptr_swigregister
os_cfar_c_sptr_swigregister(os_cfar_c_sptr)

os_cfar_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
os_cfar_c = os_cfar_c.make;

class est_v_cw(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float center_freq) -> est_v_cw_sptr

        Return a shared_ptr to a new instance of radar::est_v_cw.

        To avoid accidental use of raw pointers, radar::est_v_cw's constructor is in a private implementation class. radar::est_v_cw::make is the public interface for creating new instances.

        Params: (center_freq)
        """
        return _radar_swig.est_v_cw_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_est_v_cw
    __del__ = lambda self : None;
est_v_cw_swigregister = _radar_swig.est_v_cw_swigregister
est_v_cw_swigregister(est_v_cw)

def est_v_cw_make(*args, **kwargs):
  """
    est_v_cw_make(float center_freq) -> est_v_cw_sptr

    Return a shared_ptr to a new instance of radar::est_v_cw.

    To avoid accidental use of raw pointers, radar::est_v_cw's constructor is in a private implementation class. radar::est_v_cw::make is the public interface for creating new instances.

    Params: (center_freq)
    """
  return _radar_swig.est_v_cw_make(*args, **kwargs)

class est_v_cw_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::est_v_cw)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::est_v_cw)> self) -> est_v_cw_sptr
        __init__(boost::shared_ptr<(gr::radar::est_v_cw)> self, est_v_cw p) -> est_v_cw_sptr
        """
        this = _radar_swig.new_est_v_cw_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(est_v_cw_sptr self) -> est_v_cw"""
        return _radar_swig.est_v_cw_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_est_v_cw_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(est_v_cw_sptr self, float center_freq) -> est_v_cw_sptr

        Return a shared_ptr to a new instance of radar::est_v_cw.

        To avoid accidental use of raw pointers, radar::est_v_cw's constructor is in a private implementation class. radar::est_v_cw::make is the public interface for creating new instances.

        Params: (center_freq)
        """
        return _radar_swig.est_v_cw_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(est_v_cw_sptr self) -> unsigned int"""
        return _radar_swig.est_v_cw_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(est_v_cw_sptr self, int which, int delay)
        declare_sample_delay(est_v_cw_sptr self, unsigned int delay)
        """
        return _radar_swig.est_v_cw_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(est_v_cw_sptr self, int which) -> unsigned int"""
        return _radar_swig.est_v_cw_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(est_v_cw_sptr self) -> int"""
        return _radar_swig.est_v_cw_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(est_v_cw_sptr self) -> double"""
        return _radar_swig.est_v_cw_sptr_relative_rate(self)

    def start(self):
        """start(est_v_cw_sptr self) -> bool"""
        return _radar_swig.est_v_cw_sptr_start(self)

    def stop(self):
        """stop(est_v_cw_sptr self) -> bool"""
        return _radar_swig.est_v_cw_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(est_v_cw_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.est_v_cw_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(est_v_cw_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.est_v_cw_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(est_v_cw_sptr self) -> int"""
        return _radar_swig.est_v_cw_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(est_v_cw_sptr self, int m)"""
        return _radar_swig.est_v_cw_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(est_v_cw_sptr self)"""
        return _radar_swig.est_v_cw_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(est_v_cw_sptr self) -> bool"""
        return _radar_swig.est_v_cw_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(est_v_cw_sptr self, int i) -> long"""
        return _radar_swig.est_v_cw_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(est_v_cw_sptr self, long max_output_buffer)
        set_max_output_buffer(est_v_cw_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.est_v_cw_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(est_v_cw_sptr self, int i) -> long"""
        return _radar_swig.est_v_cw_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(est_v_cw_sptr self, long min_output_buffer)
        set_min_output_buffer(est_v_cw_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.est_v_cw_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(est_v_cw_sptr self, int which) -> float
        pc_input_buffers_full(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(est_v_cw_sptr self, int which) -> float
        pc_input_buffers_full_avg(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(est_v_cw_sptr self, int which) -> float
        pc_input_buffers_full_var(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(est_v_cw_sptr self, int which) -> float
        pc_output_buffers_full(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(est_v_cw_sptr self, int which) -> float
        pc_output_buffers_full_avg(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(est_v_cw_sptr self, int which) -> float
        pc_output_buffers_full_var(est_v_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.est_v_cw_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(est_v_cw_sptr self) -> float"""
        return _radar_swig.est_v_cw_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(est_v_cw_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.est_v_cw_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(est_v_cw_sptr self)"""
        return _radar_swig.est_v_cw_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(est_v_cw_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.est_v_cw_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(est_v_cw_sptr self) -> int"""
        return _radar_swig.est_v_cw_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(est_v_cw_sptr self) -> int"""
        return _radar_swig.est_v_cw_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(est_v_cw_sptr self, int priority) -> int"""
        return _radar_swig.est_v_cw_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(est_v_cw_sptr self) -> std::string"""
        return _radar_swig.est_v_cw_sptr_name(self)

    def symbol_name(self):
        """symbol_name(est_v_cw_sptr self) -> std::string"""
        return _radar_swig.est_v_cw_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(est_v_cw_sptr self) -> io_signature_sptr"""
        return _radar_swig.est_v_cw_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(est_v_cw_sptr self) -> io_signature_sptr"""
        return _radar_swig.est_v_cw_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(est_v_cw_sptr self) -> long"""
        return _radar_swig.est_v_cw_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(est_v_cw_sptr self) -> basic_block_sptr"""
        return _radar_swig.est_v_cw_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(est_v_cw_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.est_v_cw_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(est_v_cw_sptr self) -> std::string"""
        return _radar_swig.est_v_cw_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(est_v_cw_sptr self, std::string name)"""
        return _radar_swig.est_v_cw_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(est_v_cw_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.est_v_cw_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(est_v_cw_sptr self) -> swig_int_ptr"""
        return _radar_swig.est_v_cw_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(est_v_cw_sptr self) -> swig_int_ptr"""
        return _radar_swig.est_v_cw_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(est_v_cw_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.est_v_cw_sptr_message_subscribers(self, *args, **kwargs)

est_v_cw_sptr_swigregister = _radar_swig.est_v_cw_sptr_swigregister
est_v_cw_sptr_swigregister(est_v_cw_sptr)

est_v_cw_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
est_v_cw = est_v_cw.make;

class decimator_cc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int dec_factor) -> decimator_cc_sptr

        Return a shared_ptr to a new instance of radar::decimator_cc.

        To avoid accidental use of raw pointers, radar::decimator_cc's constructor is in a private implementation class. radar::decimator_cc::make is the public interface for creating new instances.

        Params: (dec_factor)
        """
        return _radar_swig.decimator_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_decimator_cc
    __del__ = lambda self : None;
decimator_cc_swigregister = _radar_swig.decimator_cc_swigregister
decimator_cc_swigregister(decimator_cc)

def decimator_cc_make(*args, **kwargs):
  """
    decimator_cc_make(int dec_factor) -> decimator_cc_sptr

    Return a shared_ptr to a new instance of radar::decimator_cc.

    To avoid accidental use of raw pointers, radar::decimator_cc's constructor is in a private implementation class. radar::decimator_cc::make is the public interface for creating new instances.

    Params: (dec_factor)
    """
  return _radar_swig.decimator_cc_make(*args, **kwargs)

class decimator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::decimator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::decimator_cc)> self) -> decimator_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::decimator_cc)> self, decimator_cc p) -> decimator_cc_sptr
        """
        this = _radar_swig.new_decimator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(decimator_cc_sptr self) -> decimator_cc"""
        return _radar_swig.decimator_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_decimator_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(decimator_cc_sptr self, int dec_factor) -> decimator_cc_sptr

        Return a shared_ptr to a new instance of radar::decimator_cc.

        To avoid accidental use of raw pointers, radar::decimator_cc's constructor is in a private implementation class. radar::decimator_cc::make is the public interface for creating new instances.

        Params: (dec_factor)
        """
        return _radar_swig.decimator_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(decimator_cc_sptr self) -> unsigned int"""
        return _radar_swig.decimator_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decimator_cc_sptr self, int which, int delay)
        declare_sample_delay(decimator_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.decimator_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(decimator_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.decimator_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(decimator_cc_sptr self) -> int"""
        return _radar_swig.decimator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(decimator_cc_sptr self) -> double"""
        return _radar_swig.decimator_cc_sptr_relative_rate(self)

    def start(self):
        """start(decimator_cc_sptr self) -> bool"""
        return _radar_swig.decimator_cc_sptr_start(self)

    def stop(self):
        """stop(decimator_cc_sptr self) -> bool"""
        return _radar_swig.decimator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(decimator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.decimator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(decimator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.decimator_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(decimator_cc_sptr self) -> int"""
        return _radar_swig.decimator_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(decimator_cc_sptr self, int m)"""
        return _radar_swig.decimator_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decimator_cc_sptr self)"""
        return _radar_swig.decimator_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decimator_cc_sptr self) -> bool"""
        return _radar_swig.decimator_cc_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(decimator_cc_sptr self, int i) -> long"""
        return _radar_swig.decimator_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decimator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(decimator_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.decimator_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(decimator_cc_sptr self, int i) -> long"""
        return _radar_swig.decimator_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decimator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(decimator_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.decimator_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decimator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decimator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(decimator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.decimator_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(decimator_cc_sptr self) -> float"""
        return _radar_swig.decimator_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(decimator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.decimator_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(decimator_cc_sptr self)"""
        return _radar_swig.decimator_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(decimator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.decimator_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(decimator_cc_sptr self) -> int"""
        return _radar_swig.decimator_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(decimator_cc_sptr self) -> int"""
        return _radar_swig.decimator_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(decimator_cc_sptr self, int priority) -> int"""
        return _radar_swig.decimator_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(decimator_cc_sptr self) -> std::string"""
        return _radar_swig.decimator_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(decimator_cc_sptr self) -> std::string"""
        return _radar_swig.decimator_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(decimator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.decimator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(decimator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.decimator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(decimator_cc_sptr self) -> long"""
        return _radar_swig.decimator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(decimator_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.decimator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(decimator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.decimator_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(decimator_cc_sptr self) -> std::string"""
        return _radar_swig.decimator_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(decimator_cc_sptr self, std::string name)"""
        return _radar_swig.decimator_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(decimator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.decimator_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(decimator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.decimator_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(decimator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.decimator_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(decimator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.decimator_cc_sptr_message_subscribers(self, *args, **kwargs)

decimator_cc_sptr_swigregister = _radar_swig.decimator_cc_sptr_swigregister
decimator_cc_sptr_swigregister(decimator_cc_sptr)

decimator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decimator_cc = decimator_cc.make;



